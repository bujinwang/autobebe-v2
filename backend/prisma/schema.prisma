// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      String   @db.VarChar(20) // 'STAFF' or 'PATIENT'
  clinicId  String?  @db.VarChar(50)
  createdAt DateTime @default(now())
  
  clinic    ClinicInfo? @relation(fields: [clinicId], references: [id])
  appointments Appointment[]
}

model Patient {
  id               Int           @id @default(autoincrement())
  name             String        @db.VarChar(100)
  // Remove the healthcareNumber field
  phone            String?       @db.VarChar(20)
  createdAt        DateTime      @default(now())
  clinicId         String        @db.VarChar(50)
  clinic           ClinicInfo    @relation(fields: [clinicId], references: [id])
  appointments     Appointment[]
}

model ClinicInfo {
  id             String        @id
  name           String        @db.VarChar(100)
  company        String        @db.VarChar(100)
  address        String        @db.VarChar(200)
  phone          String        @db.VarChar(20)
  hours          String        @db.VarChar(200)
  welcomeMessage String        @db.Text
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  patients       Patient[]
  appointments   Appointment[]
  users          User[]
}

// Update the Appointment model to match sanya-service
model Appointment {
  id                     Int      @id @default(autoincrement())
  patientId              Int
  doctorId               Int?
  appointmentDate        DateTime
  status                 String   @db.Text
  purposeOfVisit         String?  @db.Text
  symptoms               String?  @db.Text
  followUpAnswers        String   @db.Text
  followUpQuestions      String   @db.Text
  possibleTreatments     String   @db.Text
  suggestedPrescriptions String   @db.Text
  clinicId               String
  
  patient                Patient    @relation(fields: [patientId], references: [id])
  doctor                 User?      @relation(fields: [doctorId], references: [id])
  clinic                 ClinicInfo @relation(fields: [clinicId], references: [id])

  @@index([patientId], name: "IX_Appointments_PatientId")
  @@index([doctorId], name: "IX_Appointments_DoctorId")
}
